/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructs {
  export type NftStatStruct = {
    isNft: PromiseOrValue<boolean>;
    nftContractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    boostValue: PromiseOrValue<BigNumberish>;
    since: PromiseOrValue<BigNumberish>;
  };

  export type NftStatStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isNft: boolean;
    nftContractAddress: string;
    tokenId: BigNumber;
    boostValue: BigNumber;
    since: BigNumber;
  };

  export type PlayerStruct = {
    user: PromiseOrValue<string>;
    xp: PromiseOrValue<BigNumberish>;
    sessionsPlayed: PromiseOrValue<BigNumberish>;
    claimable: PromiseOrValue<BigNumberish>;
    totalWon: PromiseOrValue<BigNumberish>;
    rankingScore: PromiseOrValue<BigNumberish>;
    bestScore: PromiseOrValue<BigNumberish>;
  };

  export type PlayerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    xp: BigNumber;
    sessionsPlayed: BigNumber;
    claimable: BigNumber;
    totalWon: BigNumber;
    rankingScore: BigNumber;
    bestScore: BigNumber;
  };
}

export interface GameInterface extends utils.Interface {
  functions: {
    "activePlayersLastRanking()": FunctionFragment;
    "addAllowedCollection(address)": FunctionFragment;
    "addNewPlayer(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "distributeRewards(uint256,uint8)": FunctionFragment;
    "gameID()": FunctionFragment;
    "gameName()": FunctionFragment;
    "getPlayerNftStats(address)": FunctionFragment;
    "getPlayerStats(address)": FunctionFragment;
    "getTop10()": FunctionFragment;
    "getTotalSessionsPlayed()": FunctionFragment;
    "isNftAllowed(address)": FunctionFragment;
    "isPlayerInGameId(address)": FunctionFragment;
    "nftStat(address)": FunctionFragment;
    "numberOfPlayers()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "player(address)": FunctionFragment;
    "playerAddress(uint256)": FunctionFragment;
    "playerIndex(address)": FunctionFragment;
    "removeAllowedCollection(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "resetAllrankingScores()": FunctionFragment;
    "resetClaimable(address,uint256)": FunctionFragment;
    "resetNftStatus(address)": FunctionFragment;
    "setNftStatus(address,bool,address,uint256,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updateAllPlayersStats(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activePlayersLastRanking"
      | "addAllowedCollection"
      | "addNewPlayer"
      | "distributeRewards"
      | "gameID"
      | "gameName"
      | "getPlayerNftStats"
      | "getPlayerStats"
      | "getTop10"
      | "getTotalSessionsPlayed"
      | "isNftAllowed"
      | "isPlayerInGameId"
      | "nftStat"
      | "numberOfPlayers"
      | "owner"
      | "paused"
      | "player"
      | "playerAddress"
      | "playerIndex"
      | "removeAllowedCollection"
      | "renounceOwnership"
      | "resetAllrankingScores"
      | "resetClaimable"
      | "resetNftStatus"
      | "setNftStatus"
      | "transferOwnership"
      | "updateAllPlayersStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activePlayersLastRanking",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAllowedCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewPlayer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "gameID", values?: undefined): string;
  encodeFunctionData(functionFragment: "gameName", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getPlayerNftStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getTop10", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalSessionsPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isNftAllowed",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInGameId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "nftStat",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "numberOfPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "player",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "playerIndex",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetAllrankingScores",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetClaimable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetNftStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPlayersStats",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "activePlayersLastRanking",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAllowedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gameID", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gameName", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNftStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTop10", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSessionsPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isNftAllowed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nftStat", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "numberOfPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "player", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "playerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetAllrankingScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetNftStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPlayersStats",
    data: BytesLike
  ): Result;

  events: {
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RankingReset(uint256,uint256,uint256)": EventFragment;
    "RewardsDistributed(address[10],uint256,uint8[10])": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RankingReset"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsDistributed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RankingResetEventObject {
  numOfPlayers: BigNumber;
  numOfActivePlayers: BigNumber;
  timestamp: BigNumber;
}
export type RankingResetEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  RankingResetEventObject
>;

export type RankingResetEventFilter = TypedEventFilter<RankingResetEvent>;

export interface RewardsDistributedEventObject {
  top10: string[];
  amountToDistribute: BigNumber;
  rewardStructure: number[];
}
export type RewardsDistributedEvent = TypedEvent<
  [string[], BigNumber, number[]],
  RewardsDistributedEventObject
>;

export type RewardsDistributedEventFilter =
  TypedEventFilter<RewardsDistributedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface Game extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activePlayersLastRanking(overrides?: CallOverrides): Promise<[BigNumber]>;

    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gameID(overrides?: CallOverrides): Promise<[BigNumber]>;

    gameName(overrides?: CallOverrides): Promise<[string]>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.NftStatStructOutput]>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.PlayerStructOutput]>;

    getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<[BigNumber]>;

    isNftAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nftContractAddress: string; isAllowed: boolean }
    >;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    nftStat(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        isNft: boolean;
        nftContractAddress: string;
        tokenId: BigNumber;
        boostValue: BigNumber;
        since: BigNumber;
      }
    >;

    numberOfPlayers(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        xp: BigNumber;
        sessionsPlayed: BigNumber;
        claimable: BigNumber;
        totalWon: BigNumber;
        rankingScore: BigNumber;
        bestScore: BigNumber;
      }
    >;

    playerAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftStatus(
      _player: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  activePlayersLastRanking(overrides?: CallOverrides): Promise<BigNumber>;

  addAllowedCollection(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewPlayer(
    _player: PromiseOrValue<string>,
    _xp: PromiseOrValue<BigNumberish>,
    _sessionsPlayed: PromiseOrValue<BigNumberish>,
    _claimable: PromiseOrValue<BigNumberish>,
    _rankingScore: PromiseOrValue<BigNumberish>,
    _bestScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    _amountToDistribute: PromiseOrValue<BigNumberish>,
    _number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gameID(overrides?: CallOverrides): Promise<BigNumber>;

  gameName(overrides?: CallOverrides): Promise<string>;

  getPlayerNftStats(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SharedStructs.NftStatStructOutput>;

  getPlayerStats(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SharedStructs.PlayerStructOutput>;

  getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

  isNftAllowed(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [string, boolean] & { nftContractAddress: string; isAllowed: boolean }
  >;

  isPlayerInGameId(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  nftStat(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [boolean, string, BigNumber, BigNumber, BigNumber] & {
      isNft: boolean;
      nftContractAddress: string;
      tokenId: BigNumber;
      boostValue: BigNumber;
      since: BigNumber;
    }
  >;

  numberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  player(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      user: string;
      xp: BigNumber;
      sessionsPlayed: BigNumber;
      claimable: BigNumber;
      totalWon: BigNumber;
      rankingScore: BigNumber;
      bestScore: BigNumber;
    }
  >;

  playerAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  playerIndex(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  removeAllowedCollection(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetAllrankingScores(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetClaimable(
    _player: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetNftStatus(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftStatus(
    _player: PromiseOrValue<string>,
    _isNFT: PromiseOrValue<boolean>,
    _nftContractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nftBoost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllPlayersStats(
    _players: PromiseOrValue<string>[],
    _numbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    activePlayersLastRanking(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    gameID(overrides?: CallOverrides): Promise<BigNumber>;

    gameName(overrides?: CallOverrides): Promise<string>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SharedStructs.NftStatStructOutput>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SharedStructs.PlayerStructOutput>;

    getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    isNftAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [string, boolean] & { nftContractAddress: string; isAllowed: boolean }
    >;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    nftStat(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [boolean, string, BigNumber, BigNumber, BigNumber] & {
        isNft: boolean;
        nftContractAddress: string;
        tokenId: BigNumber;
        boostValue: BigNumber;
        since: BigNumber;
      }
    >;

    numberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        user: string;
        xp: BigNumber;
        sessionsPlayed: BigNumber;
        claimable: BigNumber;
        totalWon: BigNumber;
        rankingScore: BigNumber;
        bestScore: BigNumber;
      }
    >;

    playerAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    resetAllrankingScores(overrides?: CallOverrides): Promise<void>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftStatus(
      _player: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RankingReset(uint256,uint256,uint256)"(
      numOfPlayers?: null,
      numOfActivePlayers?: null,
      timestamp?: null
    ): RankingResetEventFilter;
    RankingReset(
      numOfPlayers?: null,
      numOfActivePlayers?: null,
      timestamp?: null
    ): RankingResetEventFilter;

    "RewardsDistributed(address[10],uint256,uint8[10])"(
      top10?: null,
      amountToDistribute?: null,
      rewardStructure?: null
    ): RewardsDistributedEventFilter;
    RewardsDistributed(
      top10?: null,
      amountToDistribute?: null,
      rewardStructure?: null
    ): RewardsDistributedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    activePlayersLastRanking(overrides?: CallOverrides): Promise<BigNumber>;

    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gameID(overrides?: CallOverrides): Promise<BigNumber>;

    gameName(overrides?: CallOverrides): Promise<BigNumber>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTop10(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    isNftAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    nftStat(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    numberOfPlayers(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftStatus(
      _player: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activePlayersLastRanking(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gameID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    gameName(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTop10(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSessionsPlayed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isNftAllowed(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nftStat(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    numberOfPlayers(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    player(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    playerIndex(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftStatus(
      _player: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
