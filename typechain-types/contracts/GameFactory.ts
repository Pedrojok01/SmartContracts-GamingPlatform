/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace SharedStructs {
  export type GlobalPlayerStatsStruct = {
    player: PromiseOrValue<string>;
    totalXp: PromiseOrValue<BigNumberish>;
    totalSessionsPlayed: PromiseOrValue<BigNumberish>;
    totalClaimable: PromiseOrValue<BigNumberish>;
    globalWon: PromiseOrValue<BigNumberish>;
    consecutiveLogin: PromiseOrValue<BigNumberish>;
  };

  export type GlobalPlayerStatsStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    player: string;
    totalXp: BigNumber;
    totalSessionsPlayed: BigNumber;
    totalClaimable: BigNumber;
    globalWon: BigNumber;
    consecutiveLogin: BigNumber;
  };
}

export interface GameFactoryInterface extends utils.Interface {
  functions: {
    "createNewGame(bytes32)": FunctionFragment;
    "gamesList(uint256)": FunctionFragment;
    "getGameAddress(uint256)": FunctionFragment;
    "getGameId(bytes32)": FunctionFragment;
    "getGameIdPlayedPerPlayer(address)": FunctionFragment;
    "getGamePerIndex(uint256)": FunctionFragment;
    "getGlobalPlayerStats(address)": FunctionFragment;
    "getGlobalSessionsPlayed()": FunctionFragment;
    "getLoginStatusOf(address)": FunctionFragment;
    "getNumberOfGames()": FunctionFragment;
    "owner()": FunctionFragment;
    "paused()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setPaymentManager(address)": FunctionFragment;
    "setToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "updatAllPlayersLogin(address[],bool[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "createNewGame"
      | "gamesList"
      | "getGameAddress"
      | "getGameId"
      | "getGameIdPlayedPerPlayer"
      | "getGamePerIndex"
      | "getGlobalPlayerStats"
      | "getGlobalSessionsPlayed"
      | "getLoginStatusOf"
      | "getNumberOfGames"
      | "owner"
      | "paused"
      | "renounceOwnership"
      | "setAdmin"
      | "setPaymentManager"
      | "setToken"
      | "transferOwnership"
      | "updatAllPlayersLogin"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createNewGame",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "gamesList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameAddress",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameId",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGameIdPlayedPerPlayer",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGamePerIndex",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalPlayerStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getGlobalSessionsPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLoginStatusOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getNumberOfGames",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPaymentManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setToken",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "updatAllPlayersLogin",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "createNewGame",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "gamesList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGameId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGameIdPlayedPerPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGamePerIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGlobalSessionsPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLoginStatusOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNumberOfGames",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setPaymentManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updatAllPlayersLogin",
    data: BytesLike
  ): Result;

  events: {
    "AdminAddressSet(address)": EventFragment;
    "NewGameCreated(address,address,uint256,bytes32)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "PaymentManagerAddressSet(address)": EventFragment;
    "TokenSet(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewGameCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PaymentManagerAddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AdminAddressSetEventObject {
  admin: string;
}
export type AdminAddressSetEvent = TypedEvent<
  [string],
  AdminAddressSetEventObject
>;

export type AdminAddressSetEventFilter = TypedEventFilter<AdminAddressSetEvent>;

export interface NewGameCreatedEventObject {
  owner: string;
  newGameAddress: string;
  newGameID: BigNumber;
  newGameName: string;
}
export type NewGameCreatedEvent = TypedEvent<
  [string, string, BigNumber, string],
  NewGameCreatedEventObject
>;

export type NewGameCreatedEventFilter = TypedEventFilter<NewGameCreatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PaymentManagerAddressSetEventObject {
  paymentManager: string;
}
export type PaymentManagerAddressSetEvent = TypedEvent<
  [string],
  PaymentManagerAddressSetEventObject
>;

export type PaymentManagerAddressSetEventFilter =
  TypedEventFilter<PaymentManagerAddressSetEvent>;

export interface TokenSetEventObject {
  token: string;
}
export type TokenSetEvent = TypedEvent<[string], TokenSetEventObject>;

export type TokenSetEventFilter = TypedEventFilter<TokenSetEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GameFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GameFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createNewGame(
      gameName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    gamesList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGameAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGameId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getGameIdPlayedPerPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    getGamePerIndex(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGlobalPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.GlobalPlayerStatsStructOutput]>;

    getGlobalSessionsPlayed(overrides?: CallOverrides): Promise<[BigNumber]>;

    getLoginStatusOf(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getNumberOfGames(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPaymentManager(
      _paymentManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updatAllPlayersLogin(
      _players: PromiseOrValue<string>[],
      _loggedIn: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  createNewGame(
    gameName: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  gamesList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGameAddress(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGameId(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getGameIdPlayedPerPlayer(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string[]>;

  getGamePerIndex(
    _gameId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getGlobalPlayerStats(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SharedStructs.GlobalPlayerStatsStructOutput>;

  getGlobalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

  getLoginStatusOf(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getNumberOfGames(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPaymentManager(
    _paymentManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setToken(
    _token: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updatAllPlayersLogin(
    _players: PromiseOrValue<string>[],
    _loggedIn: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createNewGame(
      gameName: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    gamesList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGameAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGameId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameIdPlayedPerPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string[]>;

    getGamePerIndex(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getGlobalPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SharedStructs.GlobalPlayerStatsStructOutput>;

    getGlobalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    getLoginStatusOf(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfGames(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPaymentManager(
      _paymentManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    updatAllPlayersLogin(
      _players: PromiseOrValue<string>[],
      _loggedIn: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminAddressSet(address)"(admin?: null): AdminAddressSetEventFilter;
    AdminAddressSet(admin?: null): AdminAddressSetEventFilter;

    "NewGameCreated(address,address,uint256,bytes32)"(
      owner?: null,
      newGameAddress?: PromiseOrValue<string> | null,
      newGameID?: PromiseOrValue<BigNumberish> | null,
      newGameName?: null
    ): NewGameCreatedEventFilter;
    NewGameCreated(
      owner?: null,
      newGameAddress?: PromiseOrValue<string> | null,
      newGameID?: PromiseOrValue<BigNumberish> | null,
      newGameName?: null
    ): NewGameCreatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "PaymentManagerAddressSet(address)"(
      paymentManager?: null
    ): PaymentManagerAddressSetEventFilter;
    PaymentManagerAddressSet(
      paymentManager?: null
    ): PaymentManagerAddressSetEventFilter;

    "TokenSet(address)"(token?: null): TokenSetEventFilter;
    TokenSet(token?: null): TokenSetEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    createNewGame(
      gameName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    gamesList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGameIdPlayedPerPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGamePerIndex(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGlobalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    getLoginStatusOf(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getNumberOfGames(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPaymentManager(
      _paymentManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updatAllPlayersLogin(
      _players: PromiseOrValue<string>[],
      _loggedIn: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createNewGame(
      gameName: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    gamesList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameAddress(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameId(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGameIdPlayedPerPlayer(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGamePerIndex(
      _gameId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGlobalSessionsPlayed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getLoginStatusOf(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getNumberOfGames(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPaymentManager(
      _paymentManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setToken(
      _token: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updatAllPlayersLogin(
      _players: PromiseOrValue<string>[],
      _loggedIn: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
