/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace SharedStructs {
  export type NftStatStruct = {
    isNft: PromiseOrValue<boolean>;
    nftContractAddress: PromiseOrValue<string>;
    tokenId: PromiseOrValue<BigNumberish>;
    boostValue: PromiseOrValue<BigNumberish>;
    since: PromiseOrValue<BigNumberish>;
  };

  export type NftStatStructOutput = [
    boolean,
    string,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    isNft: boolean;
    nftContractAddress: string;
    tokenId: BigNumber;
    boostValue: BigNumber;
    since: BigNumber;
  };

  export type PlayerStruct = {
    user: PromiseOrValue<string>;
    xp: PromiseOrValue<BigNumberish>;
    sessionsPlayed: PromiseOrValue<BigNumberish>;
    claimable: PromiseOrValue<BigNumberish>;
    totalWon: PromiseOrValue<BigNumberish>;
    rankingScore: PromiseOrValue<BigNumberish>;
    bestScore: PromiseOrValue<BigNumberish>;
  };

  export type PlayerStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    user: string;
    xp: BigNumber;
    sessionsPlayed: BigNumber;
    claimable: BigNumber;
    totalWon: BigNumber;
    rankingScore: BigNumber;
    bestScore: BigNumber;
  };
}

export interface IGameInterface extends utils.Interface {
  functions: {
    "addAllowedCollection(address)": FunctionFragment;
    "addNewPlayer(address,uint256,uint256,uint256,uint256,uint256)": FunctionFragment;
    "distributeRewards(uint256,uint8)": FunctionFragment;
    "getPlayerNftStats(address)": FunctionFragment;
    "getPlayerStats(address)": FunctionFragment;
    "getTop10()": FunctionFragment;
    "getTotalSessionsPlayed()": FunctionFragment;
    "isPlayerInGameId(address)": FunctionFragment;
    "removeAllowedCollection(address)": FunctionFragment;
    "resetAllrankingScores()": FunctionFragment;
    "resetClaimable(address,uint256)": FunctionFragment;
    "resetNftStatus(address)": FunctionFragment;
    "setNftStatus(address,bool,address,uint256,uint256)": FunctionFragment;
    "updateAllPlayersStats(address[],uint256[])": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAllowedCollection"
      | "addNewPlayer"
      | "distributeRewards"
      | "getPlayerNftStats"
      | "getPlayerStats"
      | "getTop10"
      | "getTotalSessionsPlayed"
      | "isPlayerInGameId"
      | "removeAllowedCollection"
      | "resetAllrankingScores"
      | "resetClaimable"
      | "resetNftStatus"
      | "setNftStatus"
      | "updateAllPlayersStats"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAllowedCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addNewPlayer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "distributeRewards",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerNftStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerStats",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getTop10", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getTotalSessionsPlayed",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "isPlayerInGameId",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAllowedCollection",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetAllrankingScores",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "resetClaimable",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resetNftStatus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setNftStatus",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "updateAllPlayersStats",
    values: [PromiseOrValue<string>[], PromiseOrValue<BigNumberish>[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAllowedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addNewPlayer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "distributeRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerNftStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTop10", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getTotalSessionsPlayed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPlayerInGameId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAllowedCollection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetAllrankingScores",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetClaimable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "resetNftStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setNftStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateAllPlayersStats",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IGame extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IGameInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.NftStatStructOutput]>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[SharedStructs.PlayerStructOutput]>;

    getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<[BigNumber]>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setNftStatus(
      _account: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addAllowedCollection(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addNewPlayer(
    _player: PromiseOrValue<string>,
    _xp: PromiseOrValue<BigNumberish>,
    _sessionsPlayed: PromiseOrValue<BigNumberish>,
    _claimable: PromiseOrValue<BigNumberish>,
    _rankingScore: PromiseOrValue<BigNumberish>,
    _bestScore: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  distributeRewards(
    _amountToDistribute: PromiseOrValue<BigNumberish>,
    _number: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getPlayerNftStats(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SharedStructs.NftStatStructOutput>;

  getPlayerStats(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<SharedStructs.PlayerStructOutput>;

  getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

  getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

  isPlayerInGameId(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  removeAllowedCollection(
    _collection: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetAllrankingScores(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetClaimable(
    _player: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  resetNftStatus(
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setNftStatus(
    _account: PromiseOrValue<string>,
    _isNFT: PromiseOrValue<boolean>,
    _nftContractAddress: PromiseOrValue<string>,
    _tokenId: PromiseOrValue<BigNumberish>,
    _nftBoost: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateAllPlayersStats(
    _players: PromiseOrValue<string>[],
    _numbers: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SharedStructs.NftStatStructOutput>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<SharedStructs.PlayerStructOutput>;

    getTop10(overrides?: CallOverrides): Promise<[string[], BigNumber[]]>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    resetAllrankingScores(overrides?: CallOverrides): Promise<void>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setNftStatus(
      _account: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getTop10(overrides?: CallOverrides): Promise<BigNumber>;

    getTotalSessionsPlayed(overrides?: CallOverrides): Promise<BigNumber>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setNftStatus(
      _account: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addNewPlayer(
      _player: PromiseOrValue<string>,
      _xp: PromiseOrValue<BigNumberish>,
      _sessionsPlayed: PromiseOrValue<BigNumberish>,
      _claimable: PromiseOrValue<BigNumberish>,
      _rankingScore: PromiseOrValue<BigNumberish>,
      _bestScore: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    distributeRewards(
      _amountToDistribute: PromiseOrValue<BigNumberish>,
      _number: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getPlayerNftStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerStats(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getTop10(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getTotalSessionsPlayed(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPlayerInGameId(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAllowedCollection(
      _collection: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetAllrankingScores(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetClaimable(
      _player: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    resetNftStatus(
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setNftStatus(
      _account: PromiseOrValue<string>,
      _isNFT: PromiseOrValue<boolean>,
      _nftContractAddress: PromiseOrValue<string>,
      _tokenId: PromiseOrValue<BigNumberish>,
      _nftBoost: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateAllPlayersStats(
      _players: PromiseOrValue<string>[],
      _numbers: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
