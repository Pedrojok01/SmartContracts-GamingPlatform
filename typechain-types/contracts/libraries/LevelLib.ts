/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";

export interface LevelLibInterface extends utils.Interface {
  functions: {
    "BEGINNER()": FunctionFragment;
    "GRAN_MASTER()": FunctionFragment;
    "INTERMEDIATE()": FunctionFragment;
    "JUGGERNAUT()": FunctionFragment;
    "NEWBIE()": FunctionFragment;
    "UADVANCED()": FunctionFragment;
    "ULTIMATE()": FunctionFragment;
    "getLevelFromXp(uint256)": FunctionFragment;
    "isUnlockedPerLvl(uint8,uint8)": FunctionFragment;
    "isUnlockedPerXp(uint256,uint8)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "BEGINNER"
      | "GRAN_MASTER"
      | "INTERMEDIATE"
      | "JUGGERNAUT"
      | "NEWBIE"
      | "UADVANCED"
      | "ULTIMATE"
      | "getLevelFromXp"
      | "isUnlockedPerLvl"
      | "isUnlockedPerXp"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "BEGINNER", values?: undefined): string;
  encodeFunctionData(functionFragment: "GRAN_MASTER", values?: undefined): string;
  encodeFunctionData(functionFragment: "INTERMEDIATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "JUGGERNAUT", values?: undefined): string;
  encodeFunctionData(functionFragment: "NEWBIE", values?: undefined): string;
  encodeFunctionData(functionFragment: "UADVANCED", values?: undefined): string;
  encodeFunctionData(functionFragment: "ULTIMATE", values?: undefined): string;
  encodeFunctionData(functionFragment: "getLevelFromXp", values: [PromiseOrValue<BigNumberish>]): string;
  encodeFunctionData(
    functionFragment: "isUnlockedPerLvl",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isUnlockedPerXp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(functionFragment: "BEGINNER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "GRAN_MASTER", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "INTERMEDIATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "JUGGERNAUT", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "NEWBIE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "UADVANCED", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ULTIMATE", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getLevelFromXp", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnlockedPerLvl", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isUnlockedPerXp", data: BytesLike): Result;

  events: {};
}

export interface LevelLib extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LevelLibInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    BEGINNER(overrides?: CallOverrides): Promise<[number]>;

    GRAN_MASTER(overrides?: CallOverrides): Promise<[number]>;

    INTERMEDIATE(overrides?: CallOverrides): Promise<[number]>;

    JUGGERNAUT(overrides?: CallOverrides): Promise<[number]>;

    NEWBIE(overrides?: CallOverrides): Promise<[number]>;

    UADVANCED(overrides?: CallOverrides): Promise<[number]>;

    ULTIMATE(overrides?: CallOverrides): Promise<[number]>;

    getLevelFromXp(_xp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[number] & { level: number }>;

    isUnlockedPerLvl(
      _level: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isUnlocked: boolean }>;

    isUnlockedPerXp(
      _xp: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean] & { isUnlocked: boolean }>;
  };

  BEGINNER(overrides?: CallOverrides): Promise<number>;

  GRAN_MASTER(overrides?: CallOverrides): Promise<number>;

  INTERMEDIATE(overrides?: CallOverrides): Promise<number>;

  JUGGERNAUT(overrides?: CallOverrides): Promise<number>;

  NEWBIE(overrides?: CallOverrides): Promise<number>;

  UADVANCED(overrides?: CallOverrides): Promise<number>;

  ULTIMATE(overrides?: CallOverrides): Promise<number>;

  getLevelFromXp(_xp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

  isUnlockedPerLvl(
    _level: PromiseOrValue<BigNumberish>,
    _required: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isUnlockedPerXp(
    _xp: PromiseOrValue<BigNumberish>,
    _required: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    BEGINNER(overrides?: CallOverrides): Promise<number>;

    GRAN_MASTER(overrides?: CallOverrides): Promise<number>;

    INTERMEDIATE(overrides?: CallOverrides): Promise<number>;

    JUGGERNAUT(overrides?: CallOverrides): Promise<number>;

    NEWBIE(overrides?: CallOverrides): Promise<number>;

    UADVANCED(overrides?: CallOverrides): Promise<number>;

    ULTIMATE(overrides?: CallOverrides): Promise<number>;

    getLevelFromXp(_xp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<number>;

    isUnlockedPerLvl(
      _level: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isUnlockedPerXp(
      _xp: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    BEGINNER(overrides?: CallOverrides): Promise<BigNumber>;

    GRAN_MASTER(overrides?: CallOverrides): Promise<BigNumber>;

    INTERMEDIATE(overrides?: CallOverrides): Promise<BigNumber>;

    JUGGERNAUT(overrides?: CallOverrides): Promise<BigNumber>;

    NEWBIE(overrides?: CallOverrides): Promise<BigNumber>;

    UADVANCED(overrides?: CallOverrides): Promise<BigNumber>;

    ULTIMATE(overrides?: CallOverrides): Promise<BigNumber>;

    getLevelFromXp(_xp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;

    isUnlockedPerLvl(
      _level: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isUnlockedPerXp(
      _xp: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    BEGINNER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    GRAN_MASTER(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    INTERMEDIATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    JUGGERNAUT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    NEWBIE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    UADVANCED(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ULTIMATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLevelFromXp(_xp: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isUnlockedPerLvl(
      _level: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isUnlockedPerXp(
      _xp: PromiseOrValue<BigNumberish>,
      _required: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
